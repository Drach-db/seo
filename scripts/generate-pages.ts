import * as fs from 'fs';
import * as path from 'path';
import { readGoogleSheets, groupScreensByPage } from './lib/sheets-reader';
import { generateNextJsPage } from './lib/generate-nextjs-page';
import { generateLayout } from './lib/generate-layout';

const PAGES_DIR = path.join(process.cwd(), 'src', 'app', 'seo-pages');

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
async function generatePages() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Next.js —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ Google Sheets...\n');

  // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  const { pages, screens } = await readGoogleSheets();
  console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü –∏ ${screens.length} —ç–∫—Ä–∞–Ω–æ–≤\n`);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  const screensByPage = groupScreensByPage(screens);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  for (const page of pages) {
    const pageScreens = screensByPage[page.page_id] || [];

    if (pageScreens.length === 0) {
      console.warn(`‚ö†Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${page.page_name}" (ID: ${page.page_id}) –Ω–µ –∏–º–µ–µ—Ç —ç–∫—Ä–∞–Ω–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }

    console.log(`üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.page_name} (${pageScreens.length} —ç–∫—Ä–∞–Ω–æ–≤)`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ Next.js —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageCode = generateNextJsPage(page, pageScreens);

    // –ë–µ—Ä—ë–º page_name –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º page.page_name –∫–∞–∫ —Ñ–æ–ª–±—ç–∫)
    const pageName = pageScreens[0].page_name || page.page_name;
    const pageDir = path.join(PAGES_DIR, pageName);
    const pageFile = path.join(pageDir, 'page.tsx');

    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (!fs.existsSync(pageDir)) {
      fs.mkdirSync(pageDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º page.tsx
    fs.writeFileSync(pageFile, pageCode, 'utf-8');
    console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${pageFile}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º layout.tsx —Å Header –∏ Footer
    const layoutCode = generateLayout();
    const layoutFile = path.join(pageDir, 'layout.tsx');
    fs.writeFileSync(layoutFile, layoutCode, 'utf-8');
    console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${layoutFile}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
    for (const screen of pageScreens) {
      console.log(`   ‚îî‚îÄ –≠–∫—Ä–∞–Ω ${screen.screen_id}: ${screen.artifact || 'HTML'}`);
    }
    console.log('');
  }

  console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ø–∞–ø–∫–µ: ${PAGES_DIR}`);
  console.log(`\n‚ñ∂Ô∏è  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏ "npm run build" —á—Ç–æ–±—ã Next.js —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML —Ñ–∞–π–ª—ã`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
generatePages().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
  process.exit(1);
});
