import { google } from 'googleapis';
import * as fs from 'fs';
import * as path from 'path';
import { PageData } from './sheets-reader';

const SPREADSHEET_ID = '1RWKrSegxAgKLjcZ__VmH11tGJSaidQahusH4np3MPD0';
const CREDENTIALS_PATH = path.join(process.cwd(), 'google-credentials.json');

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
function formatFileSize(bytes: number): string {
  if (bytes < 1024) return `${bytes} B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
  return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä HTML —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
function getHtmlFileSize(pageName: string): string | null {
  // Next.js —Å output:'export' –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∫–∞–∫ /seo-pages/page-name.html
  const htmlPath = path.join(process.cwd(), 'out', 'seo-pages', `${pageName}.html`);

  if (!fs.existsSync(htmlPath)) {
    console.warn(`‚ö†Ô∏è  HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${htmlPath}`);
    return null;
  }

  const stats = fs.statSync(htmlPath);
  return formatFileSize(stats.size);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –≤ Google Sheets
 */
export async function updateFileSizesInSheets(pages: PageData[]) {
  console.log('\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ Google Sheets...');

  // –ß–∏—Ç–∞–µ–º credentials
  let credentials;
  if (process.env.GOOGLE_CREDENTIALS) {
    credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
  } else if (fs.existsSync(CREDENTIALS_PATH)) {
    credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, 'utf-8'));
  } else {
    throw new Error('Google credentials not found');
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const updates: Array<{ range: string; values: string[][] }> = [];

  for (let i = 0; i < pages.length; i++) {
    const page = pages[i];
    const fileSize = getHtmlFileSize(page.page_name);

    if (fileSize) {
      const rowNumber = i + 2; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ: +1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, +1 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ —Å 1
      updates.push({
        range: `page!H${rowNumber}`, // –°—Ç–æ–ª–±–µ—Ü H = file_size
        values: [[fileSize]],
      });
      console.log(`  ‚úÖ ${page.page_name}: ${fileSize}`);
    }
  }

  // Batch update –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  if (updates.length > 0) {
    await sheets.spreadsheets.values.batchUpdate({
      spreadsheetId: SPREADSHEET_ID,
      requestBody: {
        valueInputOption: 'RAW',
        data: updates,
      },
    });
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updates.length} —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ Google Sheets`);
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  }
}
